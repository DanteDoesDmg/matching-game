{"version":3,"sources":["components/board/Board.js","App.js","serviceWorker.js","index.js"],"names":["UnconnectedBoard","size","colors","className","table","i","row","j","push","Math","floor","random","length","generateTableOfColors","map","rowIndex","key","color","squareIndex","data-position","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAEe,SAASA,EAAT,GAAqC,IAATC,EAAQ,EAARA,KACnCC,EAAS,CAAC,eAAgB,cAAe,aAAc,YAAa,UA6B1E,OACE,yBAAKC,UAAU,cA7Ba,SAAAF,GAE5B,IADA,IAAMG,EAAQ,GACLC,EAAI,EAAGA,EAAIJ,EAAMI,IAAK,CAE7B,IADA,IAAMC,EAAM,GACHC,EAAI,EAAGA,EAAIN,EAAMM,IACxBD,EAAIE,KAAKN,EAAOO,KAAKC,MAAMD,KAAKE,SAAWT,EAAOU,UAEpDR,EAAMI,KAAKF,GAEb,OAAOF,EAqBUS,CAAsBZ,GAjBFa,KAAI,SAACR,EAAKS,GAC7C,OACE,yBAAKC,IAAMP,KAAKE,SAASR,UAAS,cAASY,IACxCT,EAAIQ,KAAI,SAACG,EAAMC,GACd,OACE,yBAAKf,UAAS,iBAAYc,GAASD,IAAKP,KAAKE,SAAUQ,gBAAeD,Y,KCXrEE,MANf,WACE,OACC,kBAAC,EAAD,CAAOnB,KAAM,KCKIoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b2f77319.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function UnconnectedBoard({ size }) {\r\n  const colors = [\"light_orange\", \"dark_orange\", \"light_blue\", \"dark_blue\", \"violet\"];\r\n  const generateTableOfColors = size => {\r\n    const table = [];\r\n    for (let i = 0; i < size; i++) {\r\n      const row = [];\r\n      for (let j = 0; j < size; j++) {\r\n        row.push(colors[Math.floor(Math.random() * colors.length)]);\r\n      }\r\n      table.push(row);\r\n    }\r\n    return table;\r\n  };\r\n\r\n  const createSquares = tableOfColors => {\r\n    const tableOfSquares = tableOfColors.map((row, rowIndex) => {\r\n      return (\r\n        <div key ={Math.random()}className={`row-${rowIndex}`}>\r\n          {row.map((color,squareIndex) => {\r\n            return (\r\n              <div className={`square ${color}`} key={Math.random()} data-position={squareIndex}></div>\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return tableOfSquares;\r\n  };\r\n\r\n  return (\r\n    <div className=\"game_board\">\r\n      {createSquares(generateTableOfColors(size))}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport Board from './components/board/Board'\n\nimport './App.scss';\n\nfunction App() {\n  return (\n   <Board size={6}></Board>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}